
/**
 * A noop function that can be used when no
 * callback function is passed to patch
 * @const
 */
const noop = function() {};

/**
 * An array used to store the strings generated by calls to
 * elementOpen, elementOpenStart, elementOpenEnd, elementEnd and elementVoid
 */
let buffer_ = [];

let output_ = {};

/**
 * A counter to keep track of the nesting level when generating DOM strings.
 */
let nestingCount_ = 1;

/**
 * Pushes an element in the buffer.
 *
 * @param {string} token The string to push into the buffer.
 * @param {boolean} close A flag indicating if the buffer should be flushed.
 * @return {void} Nothing.
 */
const push_ = function(token, close = false) {
  buffer_.push(token);

  if (close) {
    output_.html = buffer_.slice().join('');
    buffer_ = [];
  }
};

/**
 * Returns the constructred DOM string at this point.
 *
 * @param {!Boolean} flush Should the string be flushed.
 * @return {string} The constructed DOM string.
 */
const getOutput = function(flush = false) {
  if (flush) {
    output_.html = '';
  }
  const tmp = output_.html.slice();
  return tmp;
};

/**
 * Creates a string of attributes given an array.
 *
 * @param {Array} data The attributes to use.
 * @return {void} Nothing.
 */
const attrsArray_ = function(data) {
  for (let i = 0, l = data.length; i < l; i += 2) {
    attr(data[i], data[i + 1]);
  }
};

/***
 * Defines a virtual attribute at this point of the DOM. This is only valid
 * when called between elementOpenStart and elementOpenEnd.
 *
 * @param {string} name The attribute's name.
 * @param {*} value The attribute's value.
 * @return {void} Nothing.
 */
const attr = function(name, value) {
  push_(` ${name}="${value}"`);
};

/**
 * Closes an open virtual Element.
 *
 * @param {string} The Element's tag.
 * @return {void} Nothing.
 */
const elementClose = function(nameOrCtor) {
  let close = false;
  nestingCount_--;
  if (nestingCount_ === 1) {
    close = true;
  }
  push_(`</${nameOrCtor}>`, close);
};

/**
 * Declares a virtual Element at the current location in the document that has
 * no children.
 *
 * @param {string} The Element's tag or constructor.
 * @param {?string=} key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param {?Array<*>=} statics An array of attribute name/value pairs of the
 *     static attributes for the Element. These will only be set once when the
 *     Element is created.
 * @param {...*} var_args Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return {void} Nothing.
 */
const elementVoid = function(nameOrCtor, key, statics, var_args) {
  elementOpen(nameOrCtor, key, statics, var_args);
  return elementClose(nameOrCtor);
};


/**
 * @param {NameOrCtorDef} nameOrCtor The Element's tag or constructor.
 * @param {?string=} key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param {?Array<*>=} statics An array of attribute name/value pairs of the
 *     static attributes for the Element. These will only be set once when the
 *     Element is created.
 * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return {void} Nothing.
 */
const elementOpen = function(nameOrCtor, key, statics, var_args) {

  elementOpenStart(nameOrCtor, key, statics);

  if (Array.isArray(var_args)) {
    attrsArray_(var_args);
  }

  return elementOpenEnd();
};

/**
 * Closes an open tag started with elementOpenStart.
 *
 * @return {void} Nothing.
 */
const elementOpenEnd = function() {
  push_('>');
  nestingCount_++;
};

/**
 * Declares a virtual Element at the current location in the document. This
 * corresponds to an opening tag and a elementClose tag is required. This is
 * like elementOpen, but the attributes are defined using the attr function
 * rather than being passed as arguments. Must be folllowed by 0 or more calls
 * to attr, then a call to elementOpenEnd.
 * @param {NameOrCtorDef} nameOrCtor The Element's tag or constructor.
 * @param {?string=} key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param {?Array<*>=} statics An array of attribute name/value pairs of the
 *     static attributes for the Element. These will only be set once when the
 *     Element is created.
 * @return {void} Nothing.
 */
const elementOpenStart = function(nameOrCtor, key, statics) {
  push_(`<${nameOrCtor}`);

  if (Array.isArray(statics)) {
    attrsArray_(statics);
  }
};

/**
 * Patches an Element with the the provided function. Exactly one top level
 * element call should be made corresponding to `node`.
 *
 * @param {!Element} node The Element where the patch should start.
 * @param {!function(T)} fn A function containing open/close/etc. calls that
 *     describe the DOM. This should have at most one top level element call.
 * @param {T=} data An argument passed to fn to represent DOM state.
 * @return {void} Nothing.
 */
const patch = function(node, description, data) {
  const fn = typeof description === 'function' ? description : noop;
  if (typeof node === 'function') {
    node(() => fn(data));
  } else {
    fn(data);
  }

  const output = getOutput();
  if (Object.prototype.hasOwnProperty.call(node, 'innerHTML')) {
    node.innerHTML = output;
  }
};

const patchOuter = patch;
const patchInner = patch;

/**
 * Declares a virtual Text at this point in the document.
 *
 * @param {string|number|boolean} value The value of the Text.
 * @param {...(function((string|number|boolean)):string)} var_args
 *     Functions to format the value which are called only when the value has
 *     changed.
 *
 * @return {void} Nothing.
 */
const text = function(value, var_args) {
  let formatted = value;

  if (Array.isArray(var_args)) {
    for (let v of var_args) {
      if (typeof v === 'function') {
        formatted = v(formatted);
      }
    }
  }

  push_('' + formatted);
};


export {
  attr,
  elementClose,
  elementOpen,
  elementOpenEnd,
  elementOpenStart,
  elementVoid,
  getOutput,
  patch,
  patchInner,
  patchOuter,
  text
};
